version: '3.8'  # Optional: Specify version if desired

services:
  # Config Server
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - spring-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8888/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Eureka Discovery Server
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    ports:
      - "8761:8761"
    networks:
      - spring-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_SERVICE_URL: http://discovery-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - zookeeper
      - kafka
      - config-server
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5


  # Zookeeper (Using Bitnami Image)
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"  # Enable anonymous login if not securing Zookeeper
    volumes:
      - zookeeper-data:/bitnami/zookeeper
    networks:
      - spring-network
    restart: unless-stopped

  # Kafka Broker (Using Bitnami Image)
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - spring-network
    depends_on:
      - zookeeper
    restart: unless-stopped

  # PostgreSQL for Book Service
  bookdb:
    image: postgres:latest
    container_name: bookdb
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - bookdb-data:/var/lib/postgresql/data
      - ./book-service/init-db:/docker-entrypoint-initdb.d
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Inventory Service
  inventorydb:
    image: postgres:latest
    container_name: inventorydb
    environment:
      POSTGRES_DB: inventory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - inventorydb-data:/var/lib/postgresql/data
      - ./inventory-service/init-db:/docker-entrypoint-initdb.d
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Location Service
  locationdb:
    image: postgres:latest
    container_name: locationdb
    environment:
      POSTGRES_DB: branches
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"
    volumes:
      - locationdb-data:/var/lib/postgresql/data
      - ./location-service/init-db:/docker-entrypoint-initdb.d
    networks:
      - spring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Book Service
  book-service:
    build:
      context: ./book-service
      dockerfile: Dockerfile
    container_name: book-service
    ports:
      - "8081:8081"
    networks:
      - spring-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: bookdb
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: password
      EUREKA_CLIENT_SERVICE_URL: http://discovery-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - config-server
      - discovery-server
      - bookdb
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    ports:
      - "8083:8083"
    networks:
      - spring-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: inventorydb
      DB_PORT: 5432
      DB_NAME: inventory
      DB_USERNAME: postgres
      DB_PASSWORD: password
      EUREKA_CLIENT_SERVICE_URL: http://discovery-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - config-server
      - discovery-server
      - inventorydb
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Location Service
  location-service:
    build:
      context: ./location-service
      dockerfile: Dockerfile
    container_name: location-service
    ports:
      - "8082:8082"
    networks:
      - spring-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: locationdb
      DB_PORT: 5432
      DB_NAME: branches
      DB_USERNAME: postgres
      DB_PASSWORD: password
      EUREKA_CLIENT_SERVICE_URL: http://discovery-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - config-server
      - discovery-server
      - locationdb
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Gateway Service
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8080:8080"
    networks:
      - spring-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICE_URL: http://discovery-server:8761/eureka/
      CONFIG_SERVER_URL: http://config-server:8888
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      GATEWAY_CORS_ALLOWED_ORIGINS: http://localhost:3000
    depends_on:
      - config-server
      - discovery-server
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  bookdb-data:
  inventorydb-data:
  locationdb-data:
  zookeeper-data:
  kafka-data:

networks:
  spring-network:
    driver: bridge
